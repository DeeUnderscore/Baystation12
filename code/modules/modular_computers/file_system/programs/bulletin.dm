/*
	================
	Computer program
	================
*/
/datum/computer_file/program/bulletin_browser
	filename = "bulletin_browser"
	filedesc = "News bulletin browser"
	extended_desc = "This program enables reading and publishing news bulletin articles."
	program_icon_state = "generic"
	size = 8
	requires_ntnet = 1
	available_on_ntnet = 1
	
	nanomodule_path = /datum/nano_module/program/computer_bulletin/
	
/datum/computer_file/program/bulletin_browser/run_program(var/mob/living/user)
	if(..())
		running_bulletin_clients += src
		return 1
	
	return 0

/datum/computer_file/program/bulletin_browser/kill_program()
	..()
	running_bulletin_clients -= src

/**
 *  Emit a beep, alerting of new bulletin stories
 *
 *  This is called by newscaster code when new stories are submitted.
 */
/datum/computer_file/program/bulletin_browser/proc/beep_alert(var/news_call)	
	for(var/mob/O in hearers(world.view-1, computer))
		O.show_message("<span class='newscaster'><em>[computer]</em> beeps, \"[news_call]\"</span>",2)
	playsound(computer.loc, 'sound/machines/twobeep.ogg', 75, 1)
	
	
/**
 *  Get the name and job/rank of a user in the format "Name Name (Job)"
 *
 *  Data is taken from the mob's ID card, defaults to "Unknown". This is in line
 *  with what /obj/machinery/newscaster uses.
 */
/datum/computer_file/program/bulletin_browser/proc/get_name_and_job(mob/user)
	. = "Unknown"
	
	var/obj/item/weapon/card/id/id_card = user.GetIdCard()
	
	if(id_card)
		. = "[id_card.registered_name] ([id_card.assignment])"




/* 
	===========	
	Nano module
	===========
*/	
	
/datum/nano_module/program/computer_bulletin
	name = "News bulletin browser"
	var/current_screen = "index"
	
	var/datum/feed_channel/current_channel = null // Channel we're performing operations (read, post) on

	// Variables for holding stuff before submission to network
	var/pending_post_body
	var/pending_post_image
	
	var/pending_channel_name = ""
	var/pending_channel_public = FALSE
	
	var/status_message = null // Message to dispaly in a message dialog
	var/error = FALSE  // Set to true if message is an error

/datum/nano_module/program/computer_bulletin/ui_interact(mob/user, ui_key = "main", var/datum/nanoui/ui = null, var/force_open = 1, var/datum/topic_state/state = default_state)
	var/list/data = list()
	var/name_on_card = "Unknown"
	
	var/datum/computer_file/program/bulletin_browser/prg = program 
	
	if(prg)
		data += prg.get_header_data()
		name_on_card = prg.get_name_and_job(user)
	
	if(status_message)
		data["current_screen"] = "message_dialog"
		data["message"] = status_message
		data["error"] = error
		
	else
		data["current_screen"] = current_screen
	
		if(current_screen == "index")
			if(news_network.wanted_issue)
				var/list/wanted_data = list()
				
				// See newscaster.dm. author is the person being sought,
				// backup_author is the author of the wanted issue.
				wanted_data["suspect"] = news_network.wanted_issue.author
				wanted_data["cop"] = news_network.wanted_issue.backup_author  
				wanted_data["description"] = news_network.wanted_issue.body
				
				if(news_network.wanted_issue.img)
					user << browse_rsc(news_network.wanted_issue.img, "wanted_issue_img.png")
					wanted_data["img"] = "wanted_issue_img.png"
				
				data["wanted"] = wanted_data

			var/list/channels_data = list()
			for(var/datum/feed_channel/channel in news_network.network_channels)
				var/list/channel_data = list()
				channel_data["name"] = channel.channel_name
				channel_data["ref"] = "\ref[channel]"
				channel_data["postable"] = ((!channel.locked || channel.author == name_on_card) && !channel.censored)
				
				channels_data.Add(list(channel_data))
				
			data["channels"] = channels_data
			
			
		else if(current_screen == "channel_display")
			data["channel_name"] = current_channel.channel_name
			data["channel_author"] = current_channel.author
			
			var/list/stories_data = list()
			
			// We use indices here so that we can generate photo filenames which 
			// match those generated by /datum/feed_network/proc/insert_message_in_channel
			for(var/i = 1, i <= current_channel.messages.len, i++)
				var/datum/feed_message/story = current_channel.messages[i]
				var/list/story_data = list()
				story_data["body"] = story.body
				story_data["author"] = story.author
				story_data["time_stamp"] = story.time_stamp
				
				story_data["img"] = null
				
				if(story.img)
					story_data["img"] = text("newscaster_photo_[]_[].png", sanitize(current_channel.channel_name), i)
					send_asset(user.client, story_data["img"])
					story_data["img_caption"] = story.caption
					
				stories_data.Add(list(story_data))
				
			data["stories"] = stories_data
			
		else if(current_screen == "new_channel")
			data["pending_channel_name"] = pending_channel_name
			data["pending_channel_public"] = pending_channel_public
			data["author_name"] = name_on_card
	
	ui = nanomanager.try_update_ui(user, src, ui_key, ui, data, force_open)
	if (!ui)
		ui = new(user, src, ui_key, "bulletin.tmpl", "News bulletin browser", 575, 700, state = state)
		ui.auto_update_layout = 1
		ui.set_initial_data(data)
		ui.open()
		
/datum/nano_module/program/computer_bulletin/Topic(href, href_list)
	if(..())
		return 1

	if(href_list["dismiss_message"])
		status_message = null
		error = FALSE
		return 1
		
	if(current_screen == "index")
		if(href_list["channel"])
			if(href_list["post"] == 1)
				// Post to a channel
				// TODO
				current_screen = "new_story"
				
			else
				// View a channel
				current_channel = locate(href_list["channel"]) in news_network.network_channels
				current_screen = "channel_display"
				
				nanomanager.update_uis(src)
				return 1
				
		if(href_list["newchannel"])
			// Create new channel
			current_screen = "new_channel"
			return 1
			
	else if(current_screen == "channel_display")
		if(href_list["return"])
			current_channel = null
			current_screen = "index"
			
			nanomanager.update_uis(src)
			return 1
			
			
	else if(current_screen == "new_channel")
		if(href_list["return"])
			pending_channel_name = ""
			pending_channel_public = 0
			current_screen = "index"
			
			nanomanager.update_uis(src)
			return 1
		
		if(href_list["set_pending"])
			if(href_list["set_pending"] == "channel_name")
				pending_channel_name = sanitizeSafe(input(usr, "Provide a new channel name", "Bulletin browser", ""), MAX_LNAME_LEN)
				return 1
				
			if(href_list["set_pending"] == "channel_public")
				pending_channel_public = !pending_channel_public
				return 1
				
		if(href_list["submit"])
			try_create_channel(usr)
			return 1
		
	return 0
	
	
/**
 *  Attempt to create a new channel
 * 
 *  Uses UI-set parameters for channel creation. Sets error on failure,
 *  sets status_message on both success and failure. 
 */
/datum/nano_module/program/computer_bulletin/proc/try_create_channel(mob/user)
	
	var/datum/computer_file/program/bulletin_browser/prg = program 
	
	var/submitter_name = "Unknown"
	if(prg)
		submitter_name = prg.get_name_and_job(user)
		
	if(submitter_name == "Unknown")
		status_message = "Unable to create channel: You are not authorized to perform this operation."
		error = TRUE
		return

	// Illegal names from newscaster.dm
	if(pending_channel_name == "" || pending_channel_name == "\[REDACTED\]")
		status_message = "Unable to create channel: Invalid channel name."
		error = TRUE
		return
		
	for(var/datum/feed_channel/C in news_network.network_channels)
		if(C.channel_name == pending_channel_name)
			status_message = "Unable to create channel: Name already exists."
			error = TRUE
			return
	
	news_network.CreateFeedChannel(pending_channel_name, submitter_name, !pending_channel_public)
	status_message = "Channel \"[pending_channel_name]\" created."
	pending_channel_name = ""
	pending_channel_public = FALSE
	current_screen = "index" // So we go back to index after dismissing message
	